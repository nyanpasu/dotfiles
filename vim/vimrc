" 2014
" vim:set et fdm=marker:

" {{{ Plugins 
" To install vim-plug: curl -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 
call plug#begin('~/.vim/plugged')

" Colourschemes
        Plug 'altercation/vim-colors-solarized'
        Plug 'nyanpasu/suwako'
        Plug 'tomasr/molokai'

        Plug 'bling/vim-airline'

        Plug 'SirVer/ultisnips'
        Plug 'honza/vim-snippets'  " ultisnips snippets (TODO fork and apply own snippets)
        Plug 'godlygeek/tabular'   " (TODO replace with vim-easy-align)
        Plug 'kien/ctrlp.vim'      " Fuzzy based file search
        Plug 'majutsushi/tagbar'   " Display buffer tags in window
        Plug 'scrooloose/nerdtree'
        Plug 'tmhedberg/matchit'   " Extension for % commands
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-commentary'
        Plug 'michaeljsmith/vim-indent-object'

        Plug 'klen/python-mode'
        Plug 'fatih/vim-go'
call plug#end()

" }}}
" {{{ General
set nocompatible   " Get rid of vi compatibility mode
syntax on          " Enable syntax highlighting
set nowrap         " Don't wrap text
set number         " Show current line number
set relativenumber " Relative number line
set mouse=a        " Enable mouse
set incsearch      " Highlight as you type your search
set expandtab      " Use spaces instead of tabs
set shiftwidth=4   " How large an indent is
set tabstop=8      " How large a tab is displayed
set softtabstop=8  " Use a mix of tab/spaces rounded to this value
set smartindent    " Indent inserted after: line ending in {, keyword, before line starting with
set shortmess+=|   " Disable hit-enter prompts
set t_Co=256       " Enable 256-color mode
set smartcase      " Smart searching. Lowercase -> case insensitive search; Uppercase -> case sensitive search
set ignorecase     " So that smart searching works
set modeline       " Enabled modeline
set hidden         " Hidden buffers
set backupdir=~/swp

set tags +=/usr/include

filetype indent plugin on

" }}}
" {{{ Keybinds
" View Highlight group under cursor
map <F3> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
                        \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
                        \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
map <F4> :bd<CR>
map <F7> :tabp<CR>
map <F8> :tabn<CR>
map <Leader>n :bprev!<CR>
map <Leader>p :bnext!<CR>

map <F9> :NERDTreeToggle<CR>
map <F10> :TagbarToggle<CR>
" Toggle search highlights
nnoremap <silent> <C-l> :set hls!<CR>
" Toggle listchars
nnoremap <silent> <C-k> :set list!<CR>

set pastetoggle=<F2>

imap ZZ <Esc>ZZ

if exists(":Tabularize")
  nmap <Leader>t= :Tabularize /=<CR>
  vmap <Leader>t= :Tabularize /=<CR>
  nmap <Leader>t: :Tabularize /:\zs<CR>
  vmap <Leader>t: :Tabularize /:\zs<CR>
endif

" }}}
" {{{ Plugins config

let g:ycm_add_preview_to_completeopt                = 1
let g:ycm_auto_trigger                              = 1
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_autoclose_preview_window_after_insertion  = 1
let g:ycm_collect_identifiers_from_tags_files       = 1
let g:ycm_complete_in_comments                      = 1
let g:ycm_confirm_extra_conf                        = 0
let g:ycm_error_symbol                              = '⛔'
let g:ycm_warning_symbol                            = '⛔'
let g:ycm_enable_diagnostic_signs                   = 1
let g:ycm_global_ycm_extra_conf                     = '~/.ycm_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax              = 1
let g:ycm_use_ultisnips_completer                   = 1
let g:ycm_filepath_completion_use_working_dir       = 0

let g:UltiSnipsUsePythonVersion    = 2 " Holy shit, I spent two hours trying to get this to just werk.
let g:UltiSnipsExpandTrigger       = "<c-y>"
let g:UltiSnipsJumpForwardTrigger  = "<c-y>"
let g:UltiSnipsJumpBackwardTrigger = "<c_u>"

let Tlist_Use_Right_Window = 1

let g:airline_powerline_fonts            = 1
let g:airline#extensions#tabline#enabled = 1

" {{{ Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 1

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

"" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" General
let g:pymode                  = 1
let g:pymode_warnings         = 1
let g:pymode_trim_whitespaces = 1
let g:pymode_options          = 1
" }}}
" }}}
" {{{ Rice

let g:rehash256 = 1

set cursorline
set encoding=utf-8
set laststatus=2

" Change fill character for vertical borders (Note: might want to use │)
set fillchars+=vert:\ 

set listchars=tab:┊\ ,eol:¬,extends:>,precedes:<

set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\*\\\|\\*/\\\|{\{{\\d\\=','','g')
set fillchars+=fold:\ 

" }}}
" {{{ Custom functions

" Function to right align
function! RightAlignVisual() range
        let lim = [virtcol("'<"), virtcol("'>")]
        let [l, r] = [min(lim), max(lim)]
        exe "'<,'>"
        's/\%'.l.'v.*\%<'.(r+1).'v./\=StrPadLeft(submatch(0),r-l+1)'
endfunction
function! StrPadLeft(s, w)
        let s = substitute(a:s, '^\s\+\|\s\+$', '', 'g')
        return repeat(' ', a:w - strwidth(s)) . s
endfunction

" }}}
